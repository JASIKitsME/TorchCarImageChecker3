Структура проекта (кратко)
(Как запустить в самом низу)
Torch/
├── data/
│   ├── Cars Dataset/            Исходные изображения (Не актуально)
│   ├── clean/                   Папка с чистыми машинами
│   ├── damaged/                 Повреждённые
│   ├── dirty/                   Грязные
│   ├── normal/                  Среднее состояние
│   └── data_split/              Разбитые на train/val/test
│       ├── train/
│       ├── val/
│       └── test/
│       └── labels.json          Метки: [чистота, битость] для каждого фото
├── models/                      Сохранённые модели
│   └── mobilenet_v2_car_state.pth
├── app.py                       API-сервер (FastAPI) — запускается после обучения
├── train.py                     Обучение модели (запускается первым)
├── ANOTHER.py                   Генератор `labels.json` (создаёт метки)
├── TESTIS.py                    Переименовывает файлы, чтобы не было конфликта имён
└── requirements.txt             Зависимости Python

=======================================================================================

Что делает каждый файл

app.py` — API-сервер (веб-интерфейс)

> Что делает:  
Позволяет загружать фото через веб-браузер и получать оценку чистоты и битости.

> Как работает:  
- Загружает обученную модель (models/mobilenet_v2_car_state.pth)
- Принимает фото через /predict
- Возвращает JSON с:
  - `Чистота`: 0–1
  - `Битость`: 0–1
  - `Рекомендация`: "Требует ремонта", "Требует мойки" и т.д.

> Запуск:
python app.py

И ТУТ

Либо в SWIFT либо если "по быстрому" - в браузере.

→ Откройте: http://127.0.0.1:8000/docs

---

train.py — Обучение модели

> Что делает:  
Обучает нейросеть на основе изображений и меток из labels.json.

> Как работает:  
- Использует MobileNetV2 (предобученная модель)
- Заменяет последний слой на Linear(..., 2) → предсказывает [чистота, битость]
- Обучается на MSELoss (ошибка среднеквадратичная)
- После обучения сохраняет модель в models/mobilenet_v2_car_state.pth

> Запуск:  

python train.py

Нужен labels.json!

---

ANOTHER.py — Генератор меток (labels.json)

> Что делает:  
Создаёт файл labels.json, который связывает каждое изображение с его меткой [чистота, битость].

> Как работает:  
- Проходит по папкам train/, val/, test/
- Для каждой папки назначает метку:
  - clean - [0.9, 0.1]
  - dirty - [0.3, 0.3]
  - damaged - [0.6, 0.7]
  - normal - [0.6, 0.4]
- Сохраняет всё в data/data_split/labels.json

> Запуск:  

python ANOTHER.py

Без этого train.py не будет работать!

---

TESTIS.py — Переименовывает файлы

> Что делает:  
Изменяет имена файлов в папках, чтобы не было дубликатов при слиянии данных.
Введите путь к папке и символ (например, _v2) → все файлы станут: car_(xxx)_v2.jpg

---

data/data_split/labels.json — Файл меток

> Что содержит:  
JSON-словарь, где:
- Ключ — путь к изображению: "train/dirty/car_001.jpg"
- Значение — метка: [0.3, 0.3] - чистота=0.3, битость=0.3

> Важно:  
- Это основа обучения — без него модель не знает, что такое "грязно" или "бито".
- Создаётся автоматически ANOTHER.py.

---

 data/data_split/ — Разделённый датасет

> Что внутри:  
Папки:
- train/ — данные для обучения
- val/ — данные для валидации (проверки качества)
- test/ — данные для тестирования (после обучения)

> Структура:  

data_split/
├── train/
│   ├── clean/
│   ├── damaged/
│   ├── dirty/
│   └── normal/
├── val/
└── test/
В других так же.


> Как создаётся:  
Скрипт split_dataset() (в ANOTHER.py) разбивает исходные данные на части.

---

 models/mobilenet_v2_car_state.pth — Сохранённая модель

> Что это:  
Файл с весами обученной нейросети.

> Как используется:  
- `app.py` загружает этот файл для предсказаний.
- `train.py` сохраняет его после обучения.

> Нужен для:  
Работы API — без него `app.py` не сможет ничего предсказать.

---

requirements.txt — Зависимости

> Что содержит:  
Список библиотек, которые нужно установить:

torch
torchvision
fastapi
uvicorn
tqdm
Pillow
pydantic


>Как использовать:  
pip install -r requirements.txt


---

 Makeintwice.py — Не используется

> Что делает:  
Использовался дабы разделить clean, damaged, normal dirty в val train test.

> Рекомендация:  
Можно удалить, если он не нужен.

---

 sample_cars/ — Для примеров

> Что внутри:  
Примеры фото для тестирования.

> Использование:  
Можно загрузить в app.py для демонстрации.

---



| Компонент | Функция |
|---------|--------|
| `train.py` | Обучает модель |
| `ANOTHER.py` | Генерирует метки |
| `TESTIS.py` | Предотвращает конфликты имён |
| `app.py` | Делает предсказания через веб |
| `labels.json` | Связывает фото с метками |
| `models/*.pth` | Сохранённая модель |

---

Как запустить?

ИМЕЯ ZIP АРХИВ НЕОБХОДИМО ТОЛЬКО УСТАНОВИТЬ ЗАВИСИМОСТИ И ЗАПУСТИТЬ APP

Если хотите сами:

# 1. Установить зависимости
pip install -r requirements.txt

# 2. Перезаписать имена изображений (уже созданы. Использовать при необходимости)
python TESTIS.py

# 3. Создать метки (уже созданы. Использовать при необходимости)
python ANOTHER.py

# 4. Обучить модель
python train.py

# 5. Запустить API
python app.py
```
Далее желательно использовать swift приложение и одну сеть, например - раздачу с телефона. Но если в файле нет swift или у вас нет возможности тестировать, то вот так тестировать прямо в браузере:

Откройте: http://127.0.0.1:8000/docs

Нажмите на /predict, "Try it out", "Choose File" → выберите 1 или несколько фото автомобиля (jpg/png)
Нажмите "Execute". Результат будет ниже.
     

---
