import os
import torch
import torch.nn as nn
from torchvision import transforms
from torchvision.models import mobilenet_v2
from PIL import Image
from fastapi import FastAPI, UploadFile, File  # ‚Üê –≠–¢–û –í–ê–ñ–ù–û!
from typing import List
import uvicorn
import socket
import io
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# === –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ ===
MODEL_PATH = "models/mobilenet_v2_car_state.pth"

# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ===
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (—Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ train.py!) ===
model = mobilenet_v2(weights=None)  # –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞
model.classifier[1] = nn.Linear(model.last_channel, 2)  # ‚Üê –ö–ª—é—á–µ–≤–æ–µ: 2 –≤—ã—Ö–æ–¥–∞

if os.path.exists(MODEL_PATH):
    model.load_state_dict(torch.load(MODEL_PATH, map_location="cpu", weights_only=False))
    print("[OK] –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
else:
    print("[!] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.")

model.eval()

# === FastAPI ===
app = FastAPI(title="Car Condition AI API")

@app.post("/predict")
async def predict(files: List[UploadFile] = File(...)):
    clean_scores = []
    damage_scores = []

    for file in files:
        try:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file.filename}")

            # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞
            image_bytes = await file.read()
            image = Image.open(io.BytesIO(image_bytes)).convert("RGB")
            image = transform(image).unsqueeze(0)

            with torch.no_grad():
                output = model(image).squeeze().tolist()
                output = torch.sigmoid(torch.tensor(output)).tolist()

            clean_scores.append(output[0])
            damage_scores.append(output[1])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file.filename if 'file' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'}: {e}")
            clean_scores.append(0.5)
            damage_scores.append(0.5)

    avg_clean = sum(clean_scores) / len(clean_scores)
    max_damage = max(damage_scores)  # ‚Üê –í–ê–ñ–ù–û: –±–µ—Ä—ë–º –ú–ê–ö–°–ò–ú–£–ú, –∞ –Ω–µ —Å—Ä–µ–¥–Ω–µ–µ!

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –º–∞—à–∏–Ω–∞ –±–∏—Ç–∞—è ‚Äî —Å—Ä–∞–∑—É "—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞"
    if max_damage > 0.6:
        recommendation = "‚ùó –¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞: –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"
    elif avg_clean < 0.59:
        recommendation = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –º–æ–π–∫–∏: —Å–∏–ª—å–Ω–∞—è –≥—Ä—è–∑—å, –Ω–æ –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
    else:
        recommendation = "‚úÖ –í —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"

    result = {
        "–ß–∏—Å—Ç–æ—Ç–∞": round(avg_clean, 3),
        "–ë–∏—Ç–æ—Å—Ç—å": round(max_damage, 3),
        "–§–æ—Ç–æ_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ": len(files),
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": recommendation
    }

    return result
if __name__ == "__main__":
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)

    print(f"üöÄ API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞:")
    print(f"   –õ–æ–∫–∞–ª—å–Ω–æ:   http://127.0.0.1:8000/docs")
    print(f"   –í —Å–µ—Ç–∏ LAN: http://{local_ip}:8000/docs")

    uvicorn.run(app, host="0.0.0.0", port=8000)
